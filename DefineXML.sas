/*********************************************************************/
/* Study:        Generic                                             */
/* Program Name: Definexls.sas                                   */
/* Description:  Create meta dataset of SDTM variables from CDISC    */
/*********************************************************************/
/* Disclaimer:   This program is the sole property of LEO Pharma A/S */
/*               and may not be copied or made available to any      */
/*               third party without written consent.                */
/*********************************************************************/
/* PARAM_DESCRIPTIONS
inputfile  ..\..\Data\Define Data\SDTM_IG.xls
inputfile  ..\..\Data\Define Data\SDTM Terminology.xls
inputfile  ..\..\Data\SDTM NDA 2017\*.sas
inputfile  ..\..\Data\Define Data\*.*
inputfile  ..\..\Data\Define Data\CRF_Codes.xlsx
outputfile ..\..\Data\Define Data\new_define.xlsx
**********************************************************************/;

/*NOTE: Search for '#Trial specific Hardcoding' which is to be updated for each trial*/

/*%macro defineXML (indata=);*/

/************Macro to check if variable exists in a dataset***********/
%macro VarExist(ds,var);
  %global result;
  %local rc dsid ;
  %let dsid=%sysfunc(open(&ds));
  %if %sysfunc(varnum(&dsid,&var)) > 0 %then %do;
    %let result=1;
    %put NOTE: Var &var exists in &ds;
  %end;
  %else %do;
    %let result=0;
    %put NOTE: Var &var not exists in &ds;
  %end;
  %let rc=%sysfunc(close(&dsid));
%mend VarExist;


/***************************************************************************************/
/*                      Reading all inputs                                             */
/***************************************************************************************/
*SDTM Datasets;
libname nda  '..\..\Data\SDTM NDA 2017';

data _null_;
  set nda.ts;
  call symput('studyid', studyid);
run;
%put &studyid;

*Reading SDTM IG data;
libname meta '..\..\Programs\DefineXML';
proc import out= meta.sdtm_var
            datafile= "..\..\Data\Define Data\SDTM_IG.xls"
            dbms=excelcs replace;
     sheet='SDTM';
     scantext=YES;
     usedate =YES;
     scantime=YES;
run;

*Reading SDTM CT 2016-03-25;
proc import out= meta.sdtm_CT
            datafile= "..\..\Data\Define Data\SDTM Terminology.xls"
            dbms=excelcs replace;
     sheet='SDTM Terminology 2016-03-25';
     scantext=YES;
     usedate =YES;
     scantime=YES;
run;

/*Reading multiple sheets from Define excel generated by Pinnacle validator*/
%macro imp (insheet=);
  proc import out= &insheet
/*              datafile= "..\..\Data\Define Data\&indata."*/
               datafile= "..\..\Data\Define Data\define-2017-03-20T12-38.xlsx"
              dbms=excelcs replace;
       sheet='&insheet.';
       scantext=YES;
       usedate =YES;
       scantime=YES;
  run;
%mend imp;

%imp(insheet=%str(Study));
%imp(insheet=%str(Datasets));
%imp(insheet=%str(Variables));
%imp(insheet=%str(ValueLevel));
%imp(insheet=%str(WhereClauses));
%imp(insheet=%str(Codelists));
%imp(insheet=%str(Dictionaries));
%imp(insheet=%str(Methods));
/*%imp(insheet=%str(Comments));*/
%imp(insheet=%str(Documents));

*creting index /alternative to proc sort;
data variables (index =(vardata=(dataset variable)));
  set variables;
run;

*Reading CRF Codes;
proc import out= work.crf_codes
            datafile= "..\..\Data\Define Data\CRF_Codes.xlsx"
            dbms=excelcs replace;
     sheet='Sheet1';
     scantext=YES;
     usedate =YES;
     scantime=YES;
run;
proc sort data=crf_codes;
  by dataset variable crf_term;
run;

/***************************************************************************************/
/*                       Codelists, NCI Termcodes                                      */
/***************************************************************************************/

/*Selecting one Event and one Finding domain to transform into Custom inorder to get formats for custom datasets*/
data sdtm_custm;  *#Trial specific Hardcoding;
  set meta.sdtm_var(where=(domain in ('MH' 'VS' 'LB'))); 
  if domain= 'MH' then 
    do;
      domain = tranwrd(domain,'MH','XH'); 
      name   = tranwrd(name ,'MH','XH'); 
           if format = 'MH' then format='XH';
/*      else if format = 'MedDRA' then format= '';*/
    end;
    else if domain= 'VS' then 
    do;
      domain = tranwrd(domain,'VS','XC'); 
      name   = tranwrd(name  ,'VS','XC'); 
      format = tranwrd(format,'VS','XC'); 
    end;
    else if domain= 'LB' then 
    do;
      domain = tranwrd(domain,'LB','XD'); 
      name   = tranwrd(name  ,'LB','XD'); 
      format = tranwrd(format,'LB','XD'); 
    end;

    keep seq domain name type format ;
run;

*adding custom domain variables to SDTM IG ;
data sdtm_var1;
  set meta.sdtm_var sdtm_custm(where=(seq ne .));
/*  by domain name;*/
run;
*variables present in the trial and info from SDTM;
proc sql; 
  create table auto_var_sdtm as
    select
      a.dataset,
      a.variable,
      b.format,
      compress(b.format,"QWERTYUIOPASDFGHJKLZXCVBNM","ik") as id /*dropping special chars including ( ) and special whitespace chars, keep characters*/
    from
      work.variables a
    left join
      work.sdtm_var1 b
    on 
      a.dataset = b.domain and
      a.variable = b.name
    where
      b.format not in (" " "ISO 8601") 
    order by
      calculated id,
      a.dataset,
      a.variable
  ;
  update auto_var_sdtm 
      set format = 'DOMAIN', 
          id     = 'DOMAIN'
      where variable = 'DOMAIN'
  ;
   update auto_var_sdtm 
      set format = 'STENRF', 
          id     = 'STENRF'
      where variable like '%ENRTPT'
  ;
   update auto_var_sdtm 
      set format = 'COUNTRY', 
          id     = 'COUNTRY'
      where variable like '%COUNTRY%'
  ;
quit;

proc sql;
 *Getting SDTM CT NCI codelist codes for the variables in the study;
  create table terms as
    select
      a.*,
      b.codelist_name,
      b.code,
      'Y' as inclflag 
    from
      auto_var_sdtm a
    left join
      meta.sdtm_CT b
    on
      a.id = b.CDISC_Submission_Value
    order by
      a.dataset,
      b.code,
      a.id,
      a.variable
  ;
  update terms 
    set inclflag = 'N'
    where upcase(variable) like ('%BODSYS') or 
          upcase(variable) like ('%DECOD') or 
          upcase(variable) in ('TSVAL' 'TSVALCD') or
          upcase(id) in ('MEDDRA') or
          upcase(id) in ('DRUGDICT') or
          upcase(variable) like ('%STRESC')
  ;
  *all possible values from the SDTM CT for the variables present in the study. Custom terminology will not be provided here, it will be programmed later in this program;
  create table terms_with_all_codes as
    select
      a.*,
      b.code as nci_code_term,
      b.CDISC_Submission_Value as term length=200 format=$200.,
      b.CDISC_Synonym_s_ as decoded_value
    from
      terms a
    left join
      meta.sdtm_CT(where=(codelist_code ne " ")) b
    on
      a.code = b.codelist_code and
      a.id  ne b.CDISC_Submission_Value  
    order by
        a.dataset,
        a.variable,
        term
  ;      
  create table medravar as 
     select * 
     from  terms 
     where upcase(id) in ('MEDDRA') ;
quit;

*Getting all the domain names;
proc sql;
  select distinct memname
  into : _dnames separated by ' '
  from dictionary.columns
   where upcase(libname)="NDA" and
   upcase(name)="DOMAIN" /*and memname not like 'X%'*/;
  ;
  select distinct memname
  into : domains separated by ' '
  from dictionary.columns
   where upcase(libname)="NDA" and
   upcase(name) in ("DOMAIN" "RDOMAIN");
  ;
  create table dictInfo as 
    select * from DICTIONARY.COLUMNS
    WHERE UPCASE(LIBNAME)="NDA";
  create table tableInfo as 
    select * from DICTIONARY.TABLES
    WHERE UPCASE(LIBNAME)="NDA";
quit;

%let _dnames = %trim(%left(&_dnames.));
%put &_dnames.;
%put &domains.;

*Reading from the datasets;
%macro all_codes;
  proc sql;
    create table all_codes
    ( dataset       char (6), 
      Variable      char (8),
      Term          char (200), 
      Data_Type     char (20)
     )
    ;
  quit;
/*  %global dom;*/
*For each dataset;
  %let i = 1;
  %do %while (%length(%scan(&_dnames., &i., ' '))>0);
   %let dom =  %scan(&_dnames., &i., ' ');
/*    %put &dom.;*/
    *getting all variables in the dataset;
      proc sql;
        select distinct variable
        into : varnames separated by ' '
        from work.terms
        where dataset = "&dom." and inclflag = 'Y'
        ;
     %put &varnames.;
     *For each variable in the Dataset;
      %let j = 1;
       %do %while (%length(%scan(&varnames., &j., ' '))>0);
         %let var =  %scan(&varnames., &j., ' ');
        *initializing temporary datasets;
          data temp1 temp2 tempcd;
            stop;
          run;
          /*Getting all unique values for the variables */
            proc sql;
            /*VISITNUM, --TPTNUM*/
            %if "%substr(&var.,(%length(&var.)-2))" eq "NUM" %then 
            %do;
                 create table temp1 as
                 select distinct put(&var.,best.) as Term format=$200.,
                        domain as dataset format=$6.,
                        "&var." as variable format=$8.,
                        "%Datatyp(&var.)" as Data_type format=$20.,
                        %substr(&var.,1,(%length(&var.)-3)) as decodval length=200
                 from nda.&dom.
                  ;  
             %end;
            /*not in (ARMCD, ETCD, --TESTCD) */
            %else %if "%substr(&var.,(%length(&var.)-1))" ne "CD" %then 
            %do;
                 create table temp2 as
                 select distinct &var. as Term format=$200.,
                        domain as dataset format=$6.,
                        "&var." as variable format=$8.,
                        "%Datatyp(&var.)" as Data_type format=$20.  
                 from nda.&dom.
                  ;  
             %end;
           /*ARMCD, --TESTCD*/
             %else %if "%substr(&var.,(%length(&var.)-1))" eq "CD" and (&dom. ne TV) and (&var. ne ETCD) %then 
             %do;
                  create table tempcd as
                 select distinct &var. as Term format=$200.,
                        domain as dataset format=$6.,
                        "&var." as variable format=$8.,
                        "%Datatyp(&var.)" as Data_type format=$20.,  
                        %substr(&var.,1,(%length(&var.)-2)) as decodval length=200
                  from nda.&dom.
                ;
              %end;
              quit;
            data all_codes;
               set all_codes temp1 temp2 tempcd;
               if term eq '' then delete;
            run; 
           %let j = %eval(&j.+1);
       %end;
     %let i = %eval(&i.+1);
  %end;
%mend;
%all_codes;


*Merging codes from datasets and CRF;
data all_crfcodes(drop=Description_in_CRF page CRF_Term);
  merge all_codes (in=a)
        crf_codes(rename=(Term_in_dataset=term));
  by dataset variable;
  if a;
run;

proc sort data=all_crfcodes;
  by dataset variable term;
run;

/****merging the values from the datasets with the values from SDTM CT inorder to get NCI codes*******************/

%let keeplst=ID codelist_name code data_type term nci_code_term decoded_value decodval;
data codes;
  format code $10.;
  merge Terms_with_all_codes (in=a)
        all_crfcodes (in=b);
  by dataset variable term;
  if b;
  label data_type = 'Data Type';
  rename codelist_name = name
         code          = NCI_Codelist_Code
         nci_code_term = nci_term_code
        ;
  *creating unique id;
  if compress(variable) not in ('STUDYID' 'DOMAIN') then ID = compress(dataset)!!'.'!!left(trim(variable));
  else ID = left(trim(variable));
  keep &keeplst variable dataset;
run;

proc sort data=codes;
  by dataset id;
run;

data codes_(drop=tempname tempcode);
  set codes;
  by dataset id;
  retain order 1 tempname tempcode ;
  if first.id then 
   do; 
     order=1;
     if name ne '' then tempname=name; /*retaining the codelist name for the missing ones*/
     else tempname = '';
     if NCI_Codelist_Code ne '' then tempcode=NCI_Codelist_Code; /*retaining the codelist code for the missing ones*/
     else tempcode = '';
    end;
  else 
   do;
     order =order+1;
     if name eq '' then name=tempname;/*retaining the codelist name for the missing ones*/
     if NCI_Codelist_Code eq '' and tempcode ne '' then NCI_Codelist_Code=tempcode;/*retaining the codelist code for the missing ones*/
   end;
/*   sortord = input(substr(nci_term_code,2),best.);*/
run;

/*removing duplicates*/
proc sort data=codes_ dupout=dupcode nodupkey ;
  by dataset variable term nci_term_code;
run;

proc sort data=codes_;
  by dataset variable ;
run;

data new_codes (drop=label decodval);
  retain ID name NCI_Codelist_Code data_type order term nci_term_code decoded_value;
  label NCI_Codelist_Code = 'NCI Codelist Code' 
        term = 'Term'
        nci_term_code = 'NCI Term Code'
        decoded_value = 'Decoded Value'
        name = 'Name';
  merge codes_(in=a) work.variables(keep= dataset variable label) ;
  by dataset variable;
  if a;

  if left(trim(decoded_value)) eq '' and left(trim(decodval)) ne '' then decoded_value = decodval;
  if name eq ' '          then name=left(trim(label));

    *Trial specific custom CT ;
 /* if     NCI_Codelist_Code eq '' 
     and (variable in ('ARM' 'ARMCD' 'ACTARM' 'ACTARMCD' 'ELEMENT' 'IDVAR' 'RDOMAIN' 'TVARMCD' 'COEVAL' 'EXTRT') 
     or  (substr(variable,3) in ('TEST' 'CAT')))  
  then decoded_value = '';
  else if decoded_value = '' then decoded_value = left(trim(term));
*/
  *#Trial specific Hardcoding;
  if substr(dataset,1,1) = 'X' then 
    do;
      name = 'SDTM Domain Abbreviation';
           if term='XC' then decoded_value="Compliance";
      else if term='XD' then decoded_value="Examinations of Dermatology";
      else if term='XH' then decoded_value="AK Treatment History";
    end;
  
run;

data new_codes;
  set new_codes end=eof;
  output;
  if eof then 
  do;
    variable  = 'STUDYID';
    ID        = 'STUDYID';
    name      = 'Study Identifier';
    data_type = 'CHAR';
    order     = 1;
    term      = "&studyid.";
    dataset   = '';
    decoded_value = '';
    nci_term_code = '';
    output;
  end;
run;


/***************************************************************************************/
/*                       Value level sheet                                             */
/***************************************************************************************/

%let value_list = &dom.ORRES QVAL /*TSVAL*/;

%macro all_values;
  proc sql;
    create table all_values
    ( dataset       char (6), 
      Variable      char (8),
      Where_Clause  char (200), 
      Data_Type     char (20),
      Origin        char (100)
    )
    ;
  quit;
  %let varnames =  ;
*For each dataset;
  %let i = 1;
  %do %while (%length(%scan(&domains., &i., ' '))>0);
   %let dom =  %scan(&domains., &i., ' ');
/*    %put &dom.;*/
  *check the datasets in which value level variables (--ORRES ,--QVAL, TSVAL etc) are present;
     %let j = 1;
     %do %while (%length(%scan(&value_list., &j., ' '))>0);
          %let var = %scan(&value_list., &j., ' ');
        %VarExist(nda.&dom.,&var.);*Checking if value level variable is present in the dataset;
        %if &result eq 1 %then %do;
           *Getting all unique values for the variable;
                  %put &var.;
              proc sql;
               create table temp as
               select distinct 
                              %if &var = &dom.ORRES %then "&dom.."!!&dom.testcd;
                        %else %if &var = QVAL %then "&dom.."!!QNAM;
                        %else %if &var = TSVAL %then "&dom.."!!TSPARMCD;
                      as Where_Clause format=$200.,

                      "&dom." as dataset format=$6.,
                      "&var." as variable format=$8.,
                      "%Datatyp(&var.)" as Data_type format=$20.,
                              %if &var eq LBORRES   %then "Laboratory";
                        %else %if &var = &dom.ORRES %then "CRF";
                        %else %if &var = QVAL %then propcase(QORIG);
                        %else %if &var = TSVAL %then "Assigned";
                      as Origin format=$100.
               from nda.&dom.
                ;  
              data all_values;
                 set all_values temp;
              run; 

       %end;
        %let j = %eval(&j.+1);
    %end;
     %let i = %eval(&i.+1);
  %end;

  proc sort data=all_values;
    by dataset variable;
  run;

  data new_values;
    set all_values;
    by dataset variable;
    retain order;
    if first.dataset then order=1;
    else order=order+1;
  run;
  
  data new_values;
    retain order dataset variable where_clause Data_type length significant_digits format mandatory codelist origin pages method predecessor Value_level_comment join_comment;
    label order              = 'Order'
          dataset            = 'Dataset'
          variable           = 'Variable'
          where_clause       = 'Where Clause'
          Data_type          = 'Data Type'
          length             = 'Length'
          significant_digits = 'Significant Digits'
          format             = 'Format'
          mandatory          = 'Mandatory'
          codelist           = 'Codelist'
          origin             = 'Origin'
          pages              = 'Pages'
          method             = 'Method'
          predecessor        = 'Predecessor'
          Value_level_comment= 'Value Level Comment'
          join_comment       = 'Join Comment';

    merge new_values(in=a) variables(keep=dataset variable length mandatory method in=b);
    by dataset variable;
    if a;
    significant_digits = '';
    format = '';
    codelist= '';
    pages = '';
    predecessor='';
    Value_level_comment='';
    join_comment='';
  run;
%mend;
%all_values;

/***************************************************************************************/
/*                       WhereClauses sheet                                             */
/***************************************************************************************/

%let where_list = &dom.TESTCD QNAM TSPARAMCD ;

%macro whereclauses;
  proc sql;
    create table where_clauses
    ( ID            char (20),
      DATASET       char (6), 
      VARIABLE      char (8),
      COMPARATOR    char (2),       
      VALUE         char (20)
    )
    ;
  quit;
  %let varnames =  ;
*For each dataset;
  %let i = 1;
  %do %while (%length(%scan(&domains., &i., ' '))>0);
   %let dom =  %scan(&domains., &i., ' ');
    %put &dom.;
  *check the datasets in which value level variables (--ORRES ,--QVAL, TSVAL etc) are present;
     %let j = 1;
     %do %while (%length(%scan(&where_list., &j., ' '))>0);
          %let var = %scan(&where_list., &j., ' ');
        %VarExist(nda.&dom.,&var.);*Checking if value level variable is present in the dataset;
        %if &result eq 1 %then %do;
           *Getting all unique values for the variable;
                  %put &var.;
              proc sql;
               create table temp as
               select distinct &var. as Value format=$20.,
                      "&dom." as dataset format=$6.,
                      "&var." as variable format=$8.,
                      "EQ"    as comparator format=$2.
               from nda.&dom.
                ;  
              data where_clauses;
                  set where_clauses temp;
                  label value = 'Value';
                 ID = left(trim(dataset))!!"."!!Value;
              run; 

       %end;
        %let j = %eval(&j.+1);
    %end;
     %let i = %eval(&i.+1);
  %end;
    
%mend;
%whereclauses;

/***************************************************************************************/
/*                       Comments sheet                                             */
/***************************************************************************************/

proc import out= Comments
            datafile= "..\..\Data\Define Data\Comments_Template.xlsx"
            dbms=excelcs replace;
     sheet='Sheet1';
     scantext=YES;
     usedate =YES;
     scantime=YES;
run;

data comments_;
  set comments;
  where description ne '' and Include_Y_ = 'Y';
  length variable $8 dataset $6;
  dataset  = scan(id,1,'.');
  variable = scan(id,2,'.');
run;

data new_comments;
  merge comments_(in=a) variables(in=b keep = dataset variable);
  by dataset variable;
  if a and b;
run;

/***************************************************************************************/
/*                    new_Methods                                                     */
/***************************************************************************************/

libname newmet xlsx  "..\..\Data\Define Data\Methods_Template.xlsx";

data Methods_;
  format variable $8. dataset $6. name $40.;
  set newmet.Methods;
  where description ne '' and Include_Y_ = 'Y';
  dataset  = scan(id,1,'.');
  variable = scan(id,2,'.');
  name = 'Method to calculate '!!left(trim(variable));
  drop Include_Y_;
run;

proc sort data=methods_;
  by dataset variable;
run;

data new_methods;
  retain id name type description expression_context expression_code document pages;
  merge Methods_(in=a) variables(in=b keep = dataset variable);
  by dataset variable;
  if a and b;
run;
/***************************************************************************************/
/*                       Variables sheet                                             */
/***************************************************************************************/
proc sort data=medravar ;
  by dataset variable;
run;

proc sort data  = new_codes(keep=dataset variable id rename=(id=codelist))
          out   = uniqcodes 
          dupout= dupcode nodupkey;
   by dataset variable codelist;
run;


data new_variables(drop=order_);
  retain order dataset variable label data_type length significant_digits format mandatory codelist origin pages method predecessor role comment;
  format codelist $37. comment $15. origin $30. method $15.;
  merge variables(in=a rename=(order=order_)) 
        new_comments(in=b keep=dataset variable id rename=(id=comment)) 
        uniqcodes (in=c)
        medravar (keep=dataset variable id rename=(id=codelist))
        new_methods (keep=dataset variable id rename=(id=method))
      ;
  by dataset variable;
  order = input(order_,best.);

  if variable in (/*'CMTRT' 'CMMODIFY'*/ 'CMDECOD' 'CMCLAS' 'CMCLASCD' ) then codelist = 'DRUGDICT';
  if variable eq 'STUDYID' then codelist = 'STUDYID';

  /*  *ORIGIN;*/
    if    variable in ('DOMAIN' 'TAETORD' 'AGEU' 'COUNTRY' 'CMCLAS' 'CMMODIFY' 'VISIT' 'VISITNUM' 'IDVAR' 'IDVARVAL' 'QNAM' 'QLABEL' 'QORIG' 'QEVAL' 'CMDECOD' 'EPOCH') 
       or codelist in ('MedDRA') 
       or substr(variable,max(1,length(variable)-1),2) eq 'CD' 
       or substr(variable,max(1,length(variable)-4),5) in ('PRESP' 'OCCUR') 
    then  origin='Assigned';
    else if variable in ('USUBJID' 'RDOMAIN' 'AGE' 'EXTRT') 
       or codelist in ('MedDRA') 
       or substr(variable,max(1,length(variable)-4),5) in ('STDTC' 'ENDTC' 'NRIND') 
       or substr(variable,max(1,length(variable)-1),2) in ('DY' 'FL') 
       or substr(variable,max(1,length(variable)-2),3) in ('SEQ')  
       or substr(variable,max(1,length(variable)-5),5) in ('STRESC' 'STRESN') 
    then  origin='Derived';
    else if variable in ('STUDYID' 'ARM')
    then origin='Protocol';
    
    if dataset in ('TE' 'TA' 'TS' 'TI' 'TV') and origin = '' 
      then origin = 'Protocol';
    else if dataset eq 'LB' and variable in ('LBCAT' 'LBORRES' 'LBORRESU' 'LBSPEC' 'LBSTRESN' 'LBSTRESU' 'LBONRLO' 'LBONRHI' 'LBSTNRLO' 'LBSTNRHI' 'LBTEST') 
      then origin = 'Laboratory';
    else if origin eq '' 
      then origin = 'CRF';
    if dataset = '' then delete;
run;

proc sort data=new_variables;
  by dataset order;
run;


/***************************************************************************************/
/*                    new_dictionaries                                                 */
/***************************************************************************************/

%macro new_dict(medver=, whodver=);
 data new_Dictionaries; 
  length id name $20 data_type $5 dictionary $20  version $10;
  label id         = 'ID'
        name       = 'Name'
        data_type  = 'Data type'
        dictionary = 'Dictionary'
        version    = 'Version';
    id   = 'MedDRA';
    name = 'MedDRA';
    data_type = 'text';
    dictionary = 'MedDra';
    version = "&medver.";
    output;
    id   = 'DRUGDICT';
    name = 'WHODrug Dictionary';
    data_type = 'text';
    dictionary = 'WHODrug';
    version = "&whodver.";
    output;
 run;
%mend;

%new_dict(medver = %str(15.1) , whodver=%str(12 Q2));


/***************************************************************************************/
/*                    new_Study                                               */
/***************************************************************************************/

%macro new_Study();

 data ts (keep=Attribute Value);
   length Attribute $40 Value $200;
   set nda.ts(keep=studyid tsparmcd tsval);
   where tsparmcd = "TITLE";
     Attribute= 'StudyName';
     Value = studyid;
   output;
     Attribute= 'StudyDescription';
     if tsval1 ne '' then Value = left(trim(tsval))!!''!!left(trim(tsval1));
     else Value = left(trim(tsval));
   output;
     Attribute= 'ProtocolName';
     Value = studyid;
   output;
 run;

 data new_Study; 
   format Attribute $40. Value $200.;
  set work.ts work.study(where=(value ne ''));
 run;
%mend;

%new_Study;

/***************************************************************************************/
/*                    new_Datasets                                              */
/***************************************************************************************/

%macro new_Datasets();
 data new_Datasets; 
  set work.datasets;
  if substr(dataset,1,1) eq 'X' and structure eq '' then
    do;
           if class eq 'FINDINGS' then structure = 'One record per observations per time point per visit per subject';
      else if class eq 'EVENTS'   then structure = 'One record per history event per subject';
    end;
 run;
%mend;

%new_Datasets;

/***************************************************************************************/
/*                    new_documents                                                   */
/***************************************************************************************/
/*Creating some blank row inorder to create empty sheet using ods.tagsets(furthur code) ;
data work.new_documents ;
   if nobs eq 0 then link OneMissingRecord;
   set work.documents nobs=nobs;
   output;
   return;
   OneMissingRecord:
   output;
   return;
run;*/

data work.new_documents ;
  format ID $10. title $50. href $20.;
  ID = "aCRF";
  Title = "Annotated CRF";
  href = "acrf.pdf";
  output;
  ID = "cSDRG";
  Title = "Study Data Reviewer's Guide";
  href = "csdrg.pdf";
  output;
run;
/***************************************************************************************/
/*                    Exporting the new_sheets                                       */
/***************************************************************************************/

  ods _ALL_ close;
  ods excel file="..\..\Data\Define Data\new_define.xlsx" STYLE=HTMLBLUE 
      OPTIONS(SHEET_NAME="Study" Orientation='Landscape' sheet_interval='Proc' ROWCOLHEADINGS='YES' Absolute_column_width='20,100' 
      autofilter='ALL' FROZEN_HEADERS='YES' gridlines='NO' contents='NO' gridlines='YES' FITTOPAGE = 'YES' );

  proc report data=work.new_study nowd;
     column _all_;
     define Value /display flow style(column)={tagattr='wraptext:no' width=150%};
  run;

  ods excel  OPTIONS(SHEET_NAME="Datasets" Absolute_column_width='10,30,20,50, 20, 40, 10,30,10');

  proc report data=work.new_datasets nowd;
     column _all_;
     define reference_data /display style(column)={tagattr='wraptext:no' width=100%};
  run;

  ods excel  OPTIONS(SHEET_NAME="Variables" Absolute_column_width='10,10,10,40,20,10,30,10,10,15,10,20,15,10,20,20');
  proc report data=work.new_variables nowd;
     column _all_;
     define data_type         /display style(column)={tagattr='wraptext:no' width=100%};
     define significant_digits/display style(column)={tagattr='wraptext:no' width=100%};
  run;

  ods excel  OPTIONS(SHEET_NAME="Valuelevel" Absolute_column_width='10,10,20,20,10,10,30,10,10,10,10,10,10,30,30');
  proc report data=work.new_values nowd;
     column _all_;
     define significant_digits  /display style(column)={tagattr='wraptext:no' width=100%};
     define value_level_comment /display style(column)={tagattr='wraptext:no' width=100%};
     define join_comment        /display style(column)={tagattr='wraptext:no' width=100%};
  run;

  ods excel  OPTIONS(SHEET_NAME="WhereClauses" Absolute_column_width='20,10,20,20,10');
  proc print data=work.Where_clauses noobs label;
  run;

  ods excel  OPTIONS(SHEET_NAME="Codelists" Absolute_column_width='15,20,30,20,10,100,30,100');
  proc report data=work.new_codes(drop=dataset variable) nowd;
     column _all_;
     define term              /display style(column)={tagattr='Format:text wraptext:no' width=150%};
     define name              /display style(column)={tagattr='wraptext:no' width=100%};
     define nci_term_code     /display style(column)={tagattr='wraptext:no' width=100%};
     define nci_codelist_code /display style(column)={tagattr='wraptext:no' width=100%};
     define decoded_value     /display style(column)={tagattr='Format:text' width=150%}; 
     define data_type         /display style(column)={tagattr='wraptext:no' width=100%};
  run;

  ods excel  OPTIONS(SHEET_NAME="Dictionaries" Absolute_column_width='10,20,20,10,10');
  proc report data=work.new_dictionaries nowd;
     column _all_;
     define data_type/width=20 display style(column)={tagattr='wraptext:no' width=100%};
  run;

  ods excel  OPTIONS(SHEET_NAME="Methods" Absolute_column_width='15,20,15,100,30,30,15,10' );
  proc report data=work.new_methods(drop=dataset variable) nowd;
     column _all_;
     define name              /display style(column)={tagattr='wraptext:no' width=100%};
     define description       /display flow style(column)={tagattr='wraptext:no' width=100%};
     define expression_context/display style(column)={tagattr='wraptext:no' width=100%};
     define expression_code   /display style(column)={tagattr='wraptext:no' width=100%};
  run;

  ods excel  OPTIONS(SHEET_NAME="Comments" Absolute_column_width='20,80,15,15');
  proc report data=work.new_comments(drop=dataset variable Include_Y_)  nowd;
     column _all_;
     define description /display style(column)={tagattr='wraptext:no' width=100%};
  run;

  ods excel  OPTIONS(SHEET_NAME="Documents" Absolute_column_width='10,15,15' );
  proc print data=work.new_Documents noobs label;
  run;
  /*** close and clear ***/
  ods excel close;
  ods listing;

%macro libraryinitializer(lib = WORK);
	proc delete data = &lib.._ALL_;
	run;
%mend;
%libraryinitializer;
/*%mend;*/
